mu <- theta[1]
sigma <- theta[2]
c <- c
alpha <- theta[3]
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
lik_dmg <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
if(length(ystar_undmg) ==0){
lik_undmg <- 0
}
else{
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
}
loglik_group3 <- lik_dmg + lik_undmg
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
# R100 lik
loglik_R100 <- sum(dnorm(R100, mean = mu, sd = sigma,log = TRUE))
loglik <- loglik_group3 + loglik_group1 + loglik_R100
return(-loglik)
}
g3_neglik_evalc <- function(c,theta,group3,R100,group1){
optimout <- optim(theta,g3_neglik_fixc,c = c,
group3 = group3, R100 = R100,
group1 = group1)
optim_val <- optimout$value
return(optim_val)
}
g3_neglik_2par <- function(theta,group3,R100,group1){
mu <- theta[1]
sigma <- theta[2]
c <- 1
alpha <- 0
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
loglik <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
loglik_R100 <- sum(dnorm(R100,mean = mu,sd = sigma, log = TRUE))
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
loglik <- loglik + lik_undmg + loglik_R100 + loglik_group1
return(-loglik)
}
library(doParallel)
doParallel::registerDoParallel(cores=8)
N_R100 <- 140
N_R20_1Y <- 300
N_R20_4Y <- 300
N_R5_4Y <- 300
mu <- 51
sigma <-  18
c <-  0
alpha <-  c(5,2,2)
l1 <- 31.02750
l2 <- 20.685
l <- l2
theta0 <- c(mu,sigma,alpha)
N_rep <- 200
lrt_dist <- readRDS("rda_R20_1Y_ecdf.rds")
lrt_ecdf <- ecdf(lrt_dist)
lrt_res<- foreach(ii=1:N_rep,.combine = 'rbind' ) %dopar% {
set.seed(ii)
R100 <- rnorm(N_R100, mean = mu, sd = sigma)
####### generate R20_1Y
y <- rnorm(N_R20_1Y, mean = mu, sd = sigma)
y <- y[order(y)]
R20_1Y <- list()
R20_1Y$g1 <- y[y<l1]
y_star <- dmg_model(y, c, alpha[1], l1)
R20_1Y$g3 <- y_star[y_star>l1]
######## generate R20_4Y
y <- rnorm(N_R20_4Y, mean = mu, sd = sigma)
y <- y[order(y)]
R20_4Y <- list()
R20_4Y$g1 <- y[y<l1]
y_star <- dmg_model(y, c, alpha[2], l1)
R20_4Y$g3 <-  y_star[y_star>l1]
######### generate R5_4Y
y <- rnorm(N_R5_4Y, mean = mu, sd = sigma)
y <- y[order(y)]
R5_4Y <- list()
R5_4Y$g1 <- y[y<l2]
y_star <- dmg_model(y, c, alpha[3], l2)
R5_4Y$g3 <- y_star[y_star>l2]
group3 <- R20_1Y$g3
group1 <- R20_1Y$g1
c_proposed <- seq(from = 0.2, to = 0.9, by = 0.01)
c_fitvalue <- sapply(c_proposed,g3_neglik_evalc,
theta = theta0, group3 = group3,
R100 = R100,group1 = group1)
c_est <- c_proposed[which.min(c_fitvalue)]
#c_est
optimout <- optim(theta0,g3_neglik_fixc,c = c_est,
group3 = group3, R100 = R100,
group1 = group1)
llr1 <- 2*optimout$value
theta_est <- optimout$par
optimout <- optim(theta0[1:2],g3_neglik_2par,
group3 = group3, R100 = R100,group1 = group1)
llr2 <- 2*optimout$value
llr_stat <- llr2 - llr1
pval <- 1-lrt_ecdf(llr_stat)
c(pval,theta_est)
}
# data generation
#source("dmg_func.R")
logit <- function(x){
return(log(x/(1-x)))
}
expit <- function(x){
1/(1+exp(-x))
}
dmg_model <- function(y, c, alpha, l) {
return(ifelse(y > l/c,
y,
y - alpha*(l/c - y)
#- alpha*l/c
))
#return ((alpha+1)*y- alpha*l/c)
#return ((alpha+1)*y - l )
}
dmg_inverse <- function(y,c,alpha,l){
return ((y + alpha*l/c)/(alpha+1))
#return ((y +l)/(alpha+1))
}
trunc_pdf_y <- function(x,a,b,mu,sigma){
truncnorm::dtruncnorm(x,a = a, b = b,mean = mu,
sd = sigma)
}
g3_neglik_fixc <- function(theta,c,group3,R100,group1){
mu <- theta[1]
sigma <- theta[2]
c <- c
alpha <- theta[3]
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
lik_dmg <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
if(length(ystar_undmg) ==0){
lik_undmg <- 0
}
else{
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
}
loglik_group3 <- lik_dmg + lik_undmg
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
# R100 lik
loglik_R100 <- sum(dnorm(R100, mean = mu, sd = sigma,log = TRUE))
loglik <- loglik_group3 + loglik_group1 + loglik_R100
return(-loglik)
}
g3_neglik_evalc <- function(c,theta,group3,R100,group1){
optimout <- optim(theta,g3_neglik_fixc,c = c,
group3 = group3, R100 = R100,
group1 = group1)
optim_val <- optimout$value
return(optim_val)
}
g3_neglik_2par <- function(theta,group3,R100,group1){
mu <- theta[1]
sigma <- theta[2]
c <- 1
alpha <- 0
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
loglik <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
loglik_R100 <- sum(dnorm(R100,mean = mu,sd = sigma, log = TRUE))
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
loglik <- loglik + lik_undmg + loglik_R100 + loglik_group1
return(-loglik)
}
library(doParallel)
doParallel::registerDoParallel(cores=8)
N_R100 <- 140
N_R20_1Y <- 300
N_R20_4Y <- 300
N_R5_4Y <- 300
mu <- 51
sigma <-  18
c <-  0.76
alpha <-  c(5,2,2)
alpha <-  c(0,2,2)
l1 <- 31.02750
l2 <- 20.685
l <- l2
theta0 <- c(mu,sigma,alpha)
N_rep <- 200
lrt_dist <- readRDS("rda_R20_1Y_ecdf.rds")
lrt_ecdf <- ecdf(lrt_dist)
lrt_res<- foreach(ii=1:N_rep,.combine = 'rbind' ) %dopar% {
set.seed(ii)
R100 <- rnorm(N_R100, mean = mu, sd = sigma)
####### generate R20_1Y
y <- rnorm(N_R20_1Y, mean = mu, sd = sigma)
y <- y[order(y)]
R20_1Y <- list()
R20_1Y$g1 <- y[y<l1]
y_star <- dmg_model(y, c, alpha[1], l1)
R20_1Y$g3 <- y_star[y_star>l1]
######## generate R20_4Y
y <- rnorm(N_R20_4Y, mean = mu, sd = sigma)
y <- y[order(y)]
R20_4Y <- list()
R20_4Y$g1 <- y[y<l1]
y_star <- dmg_model(y, c, alpha[2], l1)
R20_4Y$g3 <-  y_star[y_star>l1]
######### generate R5_4Y
y <- rnorm(N_R5_4Y, mean = mu, sd = sigma)
y <- y[order(y)]
R5_4Y <- list()
R5_4Y$g1 <- y[y<l2]
y_star <- dmg_model(y, c, alpha[3], l2)
R5_4Y$g3 <- y_star[y_star>l2]
group3 <- R20_1Y$g3
group1 <- R20_1Y$g1
c_proposed <- seq(from = 0.2, to = 0.9, by = 0.01)
c_fitvalue <- sapply(c_proposed,g3_neglik_evalc,
theta = theta0, group3 = group3,
R100 = R100,group1 = group1)
c_est <- c_proposed[which.min(c_fitvalue)]
#c_est
optimout <- optim(theta0,g3_neglik_fixc,c = c_est,
group3 = group3, R100 = R100,
group1 = group1)
llr1 <- 2*optimout$value
theta_est <- optimout$par
optimout <- optim(theta0[1:2],g3_neglik_2par,
group3 = group3, R100 = R100,group1 = group1)
llr2 <- 2*optimout$value
llr_stat <- llr2 - llr1
pval <- 1-lrt_ecdf(llr_stat)
c(pval,theta_est)
}
# data generation
#source("dmg_func.R")
logit <- function(x){
return(log(x/(1-x)))
}
expit <- function(x){
1/(1+exp(-x))
}
dmg_model <- function(y, c, alpha, l) {
return(ifelse(y > l/c,
y,
y - alpha*(l/c - y)
#- alpha*l/c
))
#return ((alpha+1)*y- alpha*l/c)
#return ((alpha+1)*y - l )
}
dmg_inverse <- function(y,c,alpha,l){
return ((y + alpha*l/c)/(alpha+1))
#return ((y +l)/(alpha+1))
}
trunc_pdf_y <- function(x,a,b,mu,sigma){
truncnorm::dtruncnorm(x,a = a, b = b,mean = mu,
sd = sigma)
}
g3_neglik_fixc <- function(theta,c,group3,R100,group1){
mu <- theta[1]
sigma <- theta[2]
c <- c
alpha <- theta[3]
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
lik_dmg <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
if(length(ystar_undmg) ==0){
lik_undmg <- 0
}
else{
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
}
loglik_group3 <- lik_dmg + lik_undmg
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
# R100 lik
loglik_R100 <- sum(dnorm(R100, mean = mu, sd = sigma,log = TRUE))
loglik <- loglik_group3 + loglik_group1 + loglik_R100
return(-loglik)
}
g3_neglik_evalc <- function(c,theta,group3,R100,group1){
optimout <- optim(theta,g3_neglik_fixc,c = c,
group3 = group3, R100 = R100,
group1 = group1)
optim_val <- optimout$value
return(optim_val)
}
g3_neglik_2par <- function(theta,group3,R100,group1){
mu <- theta[1]
sigma <- theta[2]
c <- 1
alpha <- 0
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
loglik <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
loglik_R100 <- sum(dnorm(R100,mean = mu,sd = sigma, log = TRUE))
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
loglik <- loglik + lik_undmg + loglik_R100 + loglik_group1
return(-loglik)
}
library(doParallel)
doParallel::registerDoParallel(cores=8)
N_R100 <- 140
N_R20_1Y <- 300
N_R20_4Y <- 300
N_R5_4Y <- 300
mu <- 51
sigma <-  18
c <-  0.76
alpha <-  c(5,2,2)
alpha <-  c(0,2,2)
l1 <- 31.02750
l2 <- 20.685
l <- l1
theta0 <- c(mu,sigma,alpha)
N_rep <- 200
lrt_dist <- readRDS("rda_R20_1Y_ecdf.rds")
lrt_ecdf <- ecdf(lrt_dist)
lrt_res<- foreach(ii=1:N_rep,.combine = 'rbind' ) %dopar% {
set.seed(ii)
R100 <- rnorm(N_R100, mean = mu, sd = sigma)
####### generate R20_1Y
y <- rnorm(N_R20_1Y, mean = mu, sd = sigma)
y <- y[order(y)]
R20_1Y <- list()
R20_1Y$g1 <- y[y<l1]
y_star <- dmg_model(y, c, alpha[1], l1)
R20_1Y$g3 <- y_star[y_star>l1]
######## generate R20_4Y
y <- rnorm(N_R20_4Y, mean = mu, sd = sigma)
y <- y[order(y)]
R20_4Y <- list()
R20_4Y$g1 <- y[y<l1]
y_star <- dmg_model(y, c, alpha[2], l1)
R20_4Y$g3 <-  y_star[y_star>l1]
######### generate R5_4Y
y <- rnorm(N_R5_4Y, mean = mu, sd = sigma)
y <- y[order(y)]
R5_4Y <- list()
R5_4Y$g1 <- y[y<l2]
y_star <- dmg_model(y, c, alpha[3], l2)
R5_4Y$g3 <- y_star[y_star>l2]
group3 <- R20_1Y$g3
group1 <- R20_1Y$g1
c_proposed <- seq(from = 0.2, to = 0.9, by = 0.01)
c_fitvalue <- sapply(c_proposed,g3_neglik_evalc,
theta = theta0, group3 = group3,
R100 = R100,group1 = group1)
c_est <- c_proposed[which.min(c_fitvalue)]
#c_est
optimout <- optim(theta0,g3_neglik_fixc,c = c_est,
group3 = group3, R100 = R100,
group1 = group1)
llr1 <- 2*optimout$value
theta_est <- optimout$par
optimout <- optim(theta0[1:2],g3_neglik_2par,
group3 = group3, R100 = R100,group1 = group1)
llr2 <- 2*optimout$value
llr_stat <- llr2 - llr1
pval <- 1-lrt_ecdf(llr_stat)
c(pval,theta_est)
}
lrt <- lrt_res[,1]
mean(lrt < 0.05)
alpha_seq <- seq(from = 0, to = 1.5,by = 0.5)
alpha_seq
seq(from = 0, to = 1.5,by = 0.5)
seq(from = 0, to = 1.5,length = 3)
alpha_seq <- seq(from = 0, to = 1.5,by = 0.75)
alpha_seq <- seq(from = 0, to = 4,length = 4)
alpha_seq
alpha_seq <- seq(from = 0, to = 4,length = 5)
alpha_seq
alpha_seq <- seq(from = 0, to = 3.5,length = 5)
alpha_seq
alpha_seq <- seq(from = 0, to = 3.5,by = 0.1)
res <- readRDS("uni_plot_data.rds")
y <- res[,2]
res <- readRDS("uni_plot_data.rds")
x <- res[,1]
y <- res[,2]
res <- readRDS("uni_plot_data.rds")
x <- res[,1]
y <- res[,2]
lo <- loess(y~x)
pred <- predict(lo,x)
plot(x,pred, type = ‘l')
plot(x,pred, type = 'l')
res <- readRDS("uni_plot_data.rds")
x <- res[,1]
y <- res[,2]
lo <- loess(y~x)
pred <- predict(lo,x)
plot(x,pred, type = 'l')
pred
x[19]
res <- readRDS("uni_plot_data.rds")
x <- res[,1]
y <- res[,2]
lo <- loess(y~x)
pred <- predict(lo,x)
x[19]
pred[30] <- 1
plot(x[1:30],pred[1:30], type = 'l')
res <- readRDS("uni_plot_data.rds")
x <- res[,1]
y <- res[,2]
lo <- loess(y~x)
pred <- predict(lo,x)
x[19]
pred[35] <- 1
plot(x[1:30],pred[1:35], type = 'l')
res <- readRDS("uni_plot_data.rds")
x <- res[,1]
y <- res[,2]
lo <- loess(y~x)
pred <- predict(lo,x)
x[19]
pred[35] <- 1
plot(x[1:35],pred[1:35], type = 'l')
res <- readRDS("uni_plot_data.rds")
x <- res[,1]
y <- res[,2]
lo <- loess(y~x)
pred <- predict(lo,x)
x[19]
pred[34] <- 1
plot(x[1:34],pred[1:34], type = 'l')
res <- readRDS("uni_plot_data.rds")
x <- res[,1]
y <- res[,2]
lo <- loess(y~x)
pred <- predict(lo,x)
x[19]
pred[33] <- 1
plot(x[1:33],pred[1:33], type = 'l')
pred
plot(x[1:33],pred[1:33], type = 'l',
xlab = expression(alpha),ylab = "rejection rate")
plot(x[1:33],pred[1:33], type = 'l',
xlab = expression(alpha),ylab = "rejection rate",
main = expression(paste("rejection rate of ", alpha)))
plot(x[1:33],pred[1:33], type = 'l',
xlab = expression(alpha),ylab = "rejection rate",
main = expression(paste("rejection rate of ", alpha,
" in R20_1Y group")))
5.5^2
(57 + 97)/300
57 + 97)
57 + 97
23 + 41
64/101
5 + 42
47/198
