loglik <- loglik_group3 + loglik_group1 + loglik_R100
lik_R20_4Y <- sum(log(truncnorm::dtruncnorm(R20_4Y,b = l1,
mean = mu, sd = sigma)))
lik_R20_4Y <- lik_R20_4Y + sum(log(truncnorm::dtruncnorm(R20_4Y_R100,a = l1,
mean = mu, sd = sigma)))
lik_R5_4Y <- sum(log(truncnorm::dtruncnorm(R5,b = l2,
mean = mu, sd = sigma)))
lik_R5_4Y <- lik_R5_4Y + sum(log(truncnorm::dtruncnorm(R5R100,a = l2,
mean = mu, sd = sigma)))
loglik <- loglik + lik_R20_4Y + lik_R5_4Y
#loglik <- loglik_R100 + lik_R20_4Y + lik_R5_4Y
return(-loglik)
}
theta_init <- c(50,20,2)
g3_neglik_3par(theta_init)
optimout <- optim(theta_init,g3_neglik_3par)
optimout$par
optimCheck::optim_proj(optimout$par,g3_neglik_3par,xrng = .2)
hess <- numDeriv::hessian(g3_neglik_3par,optimout$par)
theta_se <- sqrt(diag(solve(hess)))
theta_se
optimout$value
optimout$par[3] - 1.96*theta_se[3]
g3_neglik_3par <- function(theta){
mu <- theta[1]
sigma <- theta[2]
c <- 0.756
alpha <- theta[3]
group3 <- R20R100
group1 <- R20
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
lik_dmg <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
loglik_group3 <- lik_dmg + lik_undmg
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
# R100 lik
loglik_R100 <- sum(dnorm(R100, mean = mu, sd = sigma,log = TRUE))
loglik <- loglik_group3 + loglik_group1 + loglik_R100
lik_R20_4Y <- sum(log(truncnorm::dtruncnorm(R20_4Y,b = l1,
mean = mu, sd = sigma)))
lik_R20_4Y <- lik_R20_4Y + sum(log(truncnorm::dtruncnorm(R20_4Y_R100,a = l1,
mean = mu, sd = sigma)))
lik_R5_4Y <- sum(log(truncnorm::dtruncnorm(R5,b = l2,
mean = mu, sd = sigma)))
lik_R5_4Y <- lik_R5_4Y + sum(log(truncnorm::dtruncnorm(R5R100,a = l2,
mean = mu, sd = sigma)))
loglik <- loglik + lik_R20_4Y + lik_R5_4Y
#loglik <- loglik_R100 + lik_R20_4Y + lik_R5_4Y
return(-loglik)
}
theta_init <- c(50,20,2)
g3_neglik_3par(theta_init)
optimout <- optim(theta_init,g3_neglik_3par)
optimout$par
optimCheck::optim_proj(optimout$par,g3_neglik_3par,xrng = .2)
hess <- numDeriv::hessian(g3_neglik_3par,optimout$par)
theta_se <- sqrt(diag(solve(hess)))
theta_se
optimout$value
optimout$par[3] - 1.96*theta_se[3]
g3_neglik_3par <- function(theta){
mu <- theta[1]
sigma <- theta[2]
c <- 0.757
alpha <- theta[3]
group3 <- R20R100
group1 <- R20
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
lik_dmg <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
loglik_group3 <- lik_dmg + lik_undmg
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
# R100 lik
loglik_R100 <- sum(dnorm(R100, mean = mu, sd = sigma,log = TRUE))
loglik <- loglik_group3 + loglik_group1 + loglik_R100
lik_R20_4Y <- sum(log(truncnorm::dtruncnorm(R20_4Y,b = l1,
mean = mu, sd = sigma)))
lik_R20_4Y <- lik_R20_4Y + sum(log(truncnorm::dtruncnorm(R20_4Y_R100,a = l1,
mean = mu, sd = sigma)))
lik_R5_4Y <- sum(log(truncnorm::dtruncnorm(R5,b = l2,
mean = mu, sd = sigma)))
lik_R5_4Y <- lik_R5_4Y + sum(log(truncnorm::dtruncnorm(R5R100,a = l2,
mean = mu, sd = sigma)))
loglik <- loglik + lik_R20_4Y + lik_R5_4Y
#loglik <- loglik_R100 + lik_R20_4Y + lik_R5_4Y
return(-loglik)
}
theta_init <- c(50,20,2)
g3_neglik_3par(theta_init)
optimout <- optim(theta_init,g3_neglik_3par)
optimout$par
optimCheck::optim_proj(optimout$par,g3_neglik_3par,xrng = .2)
hess <- numDeriv::hessian(g3_neglik_3par,optimout$par)
theta_se <- sqrt(diag(solve(hess)))
theta_se
optimout$value
optimout$par[3] - 1.96*theta_se[3]
g3_neglik_3par <- function(theta){
mu <- theta[1]
sigma <- theta[2]
c <- 0.76
alpha <- theta[3]
group3 <- R20R100
group1 <- R20
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
lik_dmg <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
loglik_group3 <- lik_dmg + lik_undmg
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
# R100 lik
loglik_R100 <- sum(dnorm(R100, mean = mu, sd = sigma,log = TRUE))
loglik <- loglik_group3 + loglik_group1 + loglik_R100
lik_R20_4Y <- sum(log(truncnorm::dtruncnorm(R20_4Y,b = l1,
mean = mu, sd = sigma)))
lik_R20_4Y <- lik_R20_4Y + sum(log(truncnorm::dtruncnorm(R20_4Y_R100,a = l1,
mean = mu, sd = sigma)))
lik_R5_4Y <- sum(log(truncnorm::dtruncnorm(R5,b = l2,
mean = mu, sd = sigma)))
lik_R5_4Y <- lik_R5_4Y + sum(log(truncnorm::dtruncnorm(R5R100,a = l2,
mean = mu, sd = sigma)))
loglik <- loglik + lik_R20_4Y + lik_R5_4Y
#loglik <- loglik_R100 + lik_R20_4Y + lik_R5_4Y
return(-loglik)
}
theta_init <- c(50,20,2)
g3_neglik_3par(theta_init)
optimout <- optim(theta_init,g3_neglik_3par)
optimout$par
optimCheck::optim_proj(optimout$par,g3_neglik_3par,xrng = .2)
hess <- numDeriv::hessian(g3_neglik_3par,optimout$par)
theta_se <- sqrt(diag(solve(hess)))
theta_se
optimout$value
optimout$par[3] - 1.96*theta_se[3]
g3_neglik_3par <- function(theta){
mu <- theta[1]
sigma <- theta[2]
c <- 0.75
alpha <- theta[3]
group3 <- R20R100
group1 <- R20
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
lik_dmg <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
loglik_group3 <- lik_dmg + lik_undmg
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
# R100 lik
loglik_R100 <- sum(dnorm(R100, mean = mu, sd = sigma,log = TRUE))
loglik <- loglik_group3 + loglik_group1 + loglik_R100
lik_R20_4Y <- sum(log(truncnorm::dtruncnorm(R20_4Y,b = l1,
mean = mu, sd = sigma)))
lik_R20_4Y <- lik_R20_4Y + sum(log(truncnorm::dtruncnorm(R20_4Y_R100,a = l1,
mean = mu, sd = sigma)))
lik_R5_4Y <- sum(log(truncnorm::dtruncnorm(R5,b = l2,
mean = mu, sd = sigma)))
lik_R5_4Y <- lik_R5_4Y + sum(log(truncnorm::dtruncnorm(R5R100,a = l2,
mean = mu, sd = sigma)))
loglik <- loglik + lik_R20_4Y + lik_R5_4Y
#loglik <- loglik_R100 + lik_R20_4Y + lik_R5_4Y
return(-loglik)
}
theta_init <- c(50,20,2)
g3_neglik_3par(theta_init)
optimout <- optim(theta_init,g3_neglik_3par)
optimout$par
optimCheck::optim_proj(optimout$par,g3_neglik_3par,xrng = .2)
hess <- numDeriv::hessian(g3_neglik_3par,optimout$par)
theta_se <- sqrt(diag(solve(hess)))
theta_se
optimout$value
optimout$par[3] - 1.96*theta_se[3]
g3_neglik_3par <- function(theta){
mu <- theta[1]
sigma <- theta[2]
c <- 0.76
alpha <- theta[3]
group3 <- R20R100
group1 <- R20
l_star <- dmg_inverse(l,c,alpha,l)
# damaged pieces
ystar_dmg <- group3[group3 < l/c]
y_dmg <- dmg_inverse(ystar_dmg,c,alpha,l)
lik_dmg <- truncnorm::dtruncnorm(y_dmg,a = l_star,
mean = mu, sd = sigma)
lik_dmg <- lik_dmg /(alpha+1)
lik_dmg <- sum(log(lik_dmg))
# undamaged pieces
ystar_undmg <- group3[group3 > l/c]
lik_undmg <- sum(log(truncnorm::dtruncnorm(ystar_undmg,a = l_star,
mean = mu, sd = sigma)))
loglik_group3 <- lik_dmg + lik_undmg
# group1 lik
loglik_group1 <- sum(log(truncnorm::dtruncnorm(group1,b = l,
mean = mu, sd = sigma)))
# R100 lik
loglik_R100 <- sum(dnorm(R100, mean = mu, sd = sigma,log = TRUE))
loglik <- loglik_group3 + loglik_group1 + loglik_R100
lik_R20_4Y <- sum(log(truncnorm::dtruncnorm(R20_4Y,b = l1,
mean = mu, sd = sigma)))
lik_R20_4Y <- lik_R20_4Y + sum(log(truncnorm::dtruncnorm(R20_4Y_R100,a = l1,
mean = mu, sd = sigma)))
lik_R5_4Y <- sum(log(truncnorm::dtruncnorm(R5,b = l2,
mean = mu, sd = sigma)))
lik_R5_4Y <- lik_R5_4Y + sum(log(truncnorm::dtruncnorm(R5R100,a = l2,
mean = mu, sd = sigma)))
loglik <- loglik + lik_R20_4Y + lik_R5_4Y
#loglik <- loglik_R100 + lik_R20_4Y + lik_R5_4Y
return(-loglik)
}
theta_init <- c(50,20,2)
g3_neglik_3par(theta_init)
optimout <- optim(theta_init,g3_neglik_3par)
optimout$par
optimCheck::optim_proj(optimout$par,g3_neglik_3par,xrng = .2)
hess <- numDeriv::hessian(g3_neglik_3par,optimout$par)
theta_se <- sqrt(diag(solve(hess)))
theta_se
optimout$value
optimout$par[3] - 1.96*theta_se[3]
qnorm(0.975)
qnorm(0.95)
1.644
optimout$par[3] - 1.644*theta_se[3]
optimout$par[3] + c(-1,1)*1.96*theta_se[3]
optimout$par[3] + c(-1,1)*1.644*theta_se[3]
myqq <- function(x, y, ...) {
rg <- range(x, y, na.rm = T)
qqplot(x, y, xlim = rg, ylim = rg, ...)
abline(0,1)
}
dmg_model <- function(y, c, alpha, l) {
return(ifelse(y > l/c,
y,
y - alpha*(l/c-y)^(2)
)
)
}
bending <- read.csv("bending-pl-4groups.csv", header = F)
group_names <- table(bending[, 2])
names(group_names)
bending[, 1] <- bending[, 1] / 1000 * 6.895
R20R100 <- bending[which(bending[, 2] == "R20R100"), 1]
R20_4Y_R100 <- bending[which(bending[, 2] == "R20_4Y_R100"), 1]
R5R100 <- bending[which(bending[, 2] == "R5R100"), 1]
R100 <- bending[which(bending[, 2] == "R100"), 1]
#hist(R20R100)
# data generation
#source("dmg_func.R")
N_R20_1Y <- 300
N_R100 <- 140
N <- N_R20_1Y
# mu <- 48
# sigma <-  19
mu <- 50.816
sigma <-  17.912
c <-  0.76
alpha <-  4.908
l1 <- 31.02750
l2 <- 20.685
l <- l1
#set.seed(7)
N <- N_R20_1Y
y <- rnorm(N_R20_1Y, mean = mu, sd = sigma)
y <- y[order(y)]
# truncated data
y_star <- y[y > l1 / c]
# damage data
# group 2, y^*<l<y
y_obs <- list()
y_obs$group1 <- y[which(y < l)]
group23 <- y[which(y > l)]
group23_star <- dmg_model(group23, c, alpha, l)
y_obs$group2 <-
length(group23[which(group23 > l & group23_star < l)])
y_obs$group3 <- group23_star[which(group23_star > l)]
#hist(y_obs$group3)
myqq(y_obs$group3,R20R100)
myqq <- function(x, y, ...) {
rg <- range(x, y, na.rm = T)
qqplot(x, y, xlim = rg, ylim = rg, ...)
abline(0,1)
}
dmg_model <- function(y, c, alpha, l) {
return(ifelse(y > l/c,
y,
y - alpha*(l/c-y)^(2)
)
)
}
bending <- read.csv("bending-pl-4groups.csv", header = F)
group_names <- table(bending[, 2])
names(group_names)
bending[, 1] <- bending[, 1] / 1000 * 6.895
R20R100 <- bending[which(bending[, 2] == "R20R100"), 1]
R20_4Y_R100 <- bending[which(bending[, 2] == "R20_4Y_R100"), 1]
R5R100 <- bending[which(bending[, 2] == "R5R100"), 1]
R100 <- bending[which(bending[, 2] == "R100"), 1]
#hist(R20R100)
# data generation
#source("dmg_func.R")
N_R20_1Y <- 300
N_R100 <- 140
N <- N_R20_1Y
# mu <- 48
# sigma <-  19
mu <- 50.816
sigma <-  17.912
c <-  0.76
alpha <-  4.908
l1 <- 31.02750
l2 <- 20.685
l <- l1
set.seed(7)
N <- N_R20_1Y
y <- rnorm(N_R20_1Y, mean = mu, sd = sigma)
y <- y[order(y)]
# truncated data
y_star <- y[y > l1 / c]
# damage data
# group 2, y^*<l<y
y_obs <- list()
y_obs$group1 <- y[which(y < l)]
group23 <- y[which(y > l)]
group23_star <- dmg_model(group23, c, alpha, l)
y_obs$group2 <-
length(group23[which(group23 > l & group23_star < l)])
y_obs$group3 <- group23_star[which(group23_star > l)]
#hist(y_obs$group3)
myqq(y_obs$group3,R20R100)
myqq <- function(x, y, ...) {
rg <- range(x, y, na.rm = T)
qqplot(x, y, xlim = rg, ylim = rg, ...)
abline(0,1)
}
dmg_model <- function(y, c, alpha, l) {
return(ifelse(y > l/c,
y,
y - alpha*(l/c-y)^(2)
)
)
}
bending <- read.csv("bending-pl-4groups.csv", header = F)
group_names <- table(bending[, 2])
names(group_names)
bending[, 1] <- bending[, 1] / 1000 * 6.895
R20R100 <- bending[which(bending[, 2] == "R20R100"), 1]
R20_4Y_R100 <- bending[which(bending[, 2] == "R20_4Y_R100"), 1]
R5R100 <- bending[which(bending[, 2] == "R5R100"), 1]
R100 <- bending[which(bending[, 2] == "R100"), 1]
#hist(R20R100)
# data generation
#source("dmg_func.R")
N_R20_1Y <- 300
N_R100 <- 140
N <- N_R20_1Y
# mu <- 48
# sigma <-  19
mu <- 50.816
sigma <-  17.912
c <-  0.76
alpha <-  4.908
alpha <-  0
l1 <- 31.02750
l2 <- 20.685
l <- l1
set.seed(7)
N <- N_R20_1Y
y <- rnorm(N_R20_1Y, mean = mu, sd = sigma)
y <- y[order(y)]
# truncated data
y_star <- y[y > l1 / c]
# damage data
# group 2, y^*<l<y
y_obs <- list()
y_obs$group1 <- y[which(y < l)]
group23 <- y[which(y > l)]
group23_star <- dmg_model(group23, c, alpha, l)
y_obs$group2 <-
length(group23[which(group23 > l & group23_star < l)])
y_obs$group3 <- group23_star[which(group23_star > l)]
#hist(y_obs$group3)
myqq(y_obs$group3,R20R100)
myqq <- function(x, y, ...) {
rg <- range(x, y, na.rm = T)
qqplot(x, y, xlim = rg, ylim = rg, ...)
abline(0,1)
}
dmg_model <- function(y, c, alpha, l) {
return(ifelse(y > l/c,
y,
y - alpha*(l/c-y)^(2)
)
)
}
bending <- read.csv("bending-pl-4groups.csv", header = F)
group_names <- table(bending[, 2])
names(group_names)
bending[, 1] <- bending[, 1] / 1000 * 6.895
R20R100 <- bending[which(bending[, 2] == "R20R100"), 1]
R20_4Y_R100 <- bending[which(bending[, 2] == "R20_4Y_R100"), 1]
R5R100 <- bending[which(bending[, 2] == "R5R100"), 1]
R100 <- bending[which(bending[, 2] == "R100"), 1]
#hist(R20R100)
# data generation
#source("dmg_func.R")
N_R20_1Y <- 300
N_R100 <- 140
N <- N_R20_1Y
# mu <- 48
# sigma <-  19
mu <- 50.816
sigma <-  17.912
c <-  0.76
alpha <-  4.908
alpha <-  4.908
l1 <- 31.02750
l2 <- 20.685
l <- l1
set.seed(7)
N <- N_R20_1Y
y <- rnorm(N_R20_1Y, mean = mu, sd = sigma)
y <- y[order(y)]
# truncated data
y_star <- y[y > l1 / c]
# damage data
# group 2, y^*<l<y
y_obs <- list()
y_obs$group1 <- y[which(y < l)]
group23 <- y[which(y > l)]
group23_star <- dmg_model(group23, c, alpha, l)
y_obs$group2 <-
length(group23[which(group23 > l & group23_star < l)])
y_obs$group3 <- group23_star[which(group23_star > l)]
#hist(y_obs$group3)
myqq(y_obs$group3,R20R100)
expit(0.70748)
logit <- function(x){
return(log(x/(1-x)))
}
expit <- function(x){
1/(1+exp(-x))
}
theta_est <- logit(0.707)
theta_se <- 1.50
logit <- function(x){
return(log(x/(1-x)))
}
expit <- function(x){
1/(1+exp(-x))
}
theta_est <- logit(0.707)
theta_se <- 1.50
theta_est + 1.96theta_se
lower <- theta_est - 1.96*theta_se
logit <- function(x){
return(log(x/(1-x)))
}
expit <- function(x){
1/(1+exp(-x))
}
theta_est <- logit(0.707)
theta_se <- 1.50
upper <- theta_est + 1.96*theta_se
lower <- theta_est - 1.96*theta_se
expit(upper)
expit(lower)
expit(upper) - expit(lower)
(expit(upper) - expit(lower))/4
